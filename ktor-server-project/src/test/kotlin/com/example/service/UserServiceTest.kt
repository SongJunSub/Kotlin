package com.example.service

import com.example.plugins.User
import com.example.repository.UserRepository
import io.mockk.coEvery
import io.mockk.mockk
import kotlinx.coroutines.runBlocking
import kotlin.test.Test
import kotlin.test.assertEquals

class UserServiceTest {

    private val userRepository: UserRepository = mockk()
    private val userService = UserServiceImpl(userRepository)

    @Test
    fun `findAll should return users from repository`() = runBlocking {
        // Given
        val expectedUsers = listOf(User(1, "Test User", 30))
        coEvery { userRepository.findAll() } returns expectedUsers

        // When
        val result = userService.findAll()

        // Then
        assertEquals(expectedUsers, result)
    }

    @Test
    fun `create should return user from repository`() = runBlocking {
        // Given
        val newUser = User(0, "New User", 25) // ID is 0 as it's generated by DB
        val createdUser = newUser.copy(id = 1) // DB returns user with ID
        coEvery { userRepository.create(newUser) } returns createdUser

        // When
        val result = userService.create(newUser)

        // Then
        assertEquals(createdUser, result)
    }
}
